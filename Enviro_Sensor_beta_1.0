/*
 *
 *
  ##Enviro_Server
  
  A simple web server that displays real-time raw data from the serial of the COZIR C02/Temp/Humidity sensor, LDR and PIR motion sensors.
  POE Freetronic Etherten 3.0 collects data and hosts webserver.
 
  created 26 Sept 2016
  by James R. Barrett & Jerome Clinton
 
  modified 27 Sept
  by James 
 
  - added code:  "&& (sizeof(inputString) == 23)" to line 112
  - as attempt to attenuate the outputString to its required size
  - may need to add proper filters searching buffer for  "H" and EL (marking begining and end of packet)
 *
 *
 */
 
#define I2C_ADDRESS 0x50
#include <SPI.h>
#include <Ethernet.h>
#include <Wire.h>
#include <SoftwareSerial.h>

byte mac[6];                      // MAC address byte
char rawChar;                     // temp storage for reading in from COZIR sensor UART
String inputString = "";          // a string to hold incoming data
String outputString = "";         // a string to save the COZIR sensor raw data when reading complete
boolean stringComplete = false;   // whether the string is complete
int ledPin = 3;                   // ouput pin for the PIR status LED
int pirState = LOW;               // PIR state value(assuming initaially no motion detected)
int ldrPin = 0;                   // input pin for LDR light sensor
const byte interruptPin = 2;      // interrupt pin for PIR motion sensor output

// set a valid IP address
IPAddress ip(192, 168, 15, 154);

// serial ports for reading COZIR serial data
SoftwareSerial mySerial(8, 9); // RX, TX

// setup ethernet server ports
EthernetServer server(80);      // deafult page (directory and COZIR sensor data)

// read register to determine Etherten MAC address
byte readRegister(byte r)
{
  unsigned char v;
  Wire.beginTransmission(I2C_ADDRESS);
  Wire.write(r);  // register to read
  Wire.endTransmission();

  Wire.requestFrom(I2C_ADDRESS, 1); // read a byte
  while(!Wire.available()) {
    ; // wait
  }
  v = Wire.read();
  return v;
}

// recieve data from COZIR sensor UART serial
void recvCozirData() {
  if (mySerial.available() > 0) {
    rawChar = mySerial.read();
    // add it to the inputString:
    inputString += rawChar;
    // if the incoming character is a newline, set a flag
    // so the main loop can do something about it:
    if (rawChar == '\n') {
      stringComplete = true;
    }
  }
}

// interrupt call for change in motion
void motion(){
  pirState = !pirState;
  // print in serial
  Serial.println("MOTION CHANGE");
  // update LED status light
  digitalWrite(ledPin, pirState);
}

void setup() {
  pinMode(ledPin, OUTPUT);        // declare LED output
  pinMode(interruptPin, INPUT);   // declre interrupt pin input
  // setup interrupt for PIR motion detection
  attachInterrupt(digitalPinToInterrupt(interruptPin), motion, CHANGE);
  // Open serial communications and wait for port to open:
  mySerial.begin(9600);
  Serial.begin(9600);
  while (!Serial) {
    ; // wait for serial port to connect. Needed for native USB port only
  }

  // get MAC address from the MAC chip
  Wire.begin();
  mac[0] = readRegister(0xFA);
  mac[1] = readRegister(0xFB);
  mac[2] = readRegister(0xFC);
  mac[3] = readRegister(0xFD);
  mac[4] = readRegister(0xFE);
  mac[5] = readRegister(0xFF);
  // start the Ethernet connection and the servers
  Ethernet.begin(mac, ip);
  server.begin();
  Serial.print("server is at ");
  Serial.println(Ethernet.localIP());
}

void loop() {    
  // get COZIR serial data continuously
  recvCozirData();
  // print the string when a newline arrives
  // save string if completed and if it is the expected size
  if (stringComplete && (sizeof(inputString) == 23)) {
    outputString = inputString;
    Serial.println(outputString);
  }
  // listen for incoming clients on the default server
  EthernetClient client = server.available();
  if (client) {
    Serial.println("new deafult client");
    connectToClient(client);
    Serial.println("deafult client disconnected");
  }
  // clear a full string
  if (stringComplete) {
    // clear the string:
    inputString = "";
    stringComplete = false;
  }
}

// deafult
void connectToClient(EthernetClient client) {
  // an http request ends with a blank line
  boolean currentLineIsBlank = true;
  while (client.connected()) {
    if (client.available()) {
      char c = client.read();
      Serial.write(c);
      // if you've gotten to the end of the line (received a newline
      // character) and the line is blank, the http request has ended,
      // so you can send a reply
      if (c == '\n' && currentLineIsBlank) {
        // send a standard http response header
        client.println("HTTP/1.1 200 OK");
        client.println("Content-Type: text/html");
        client.println("Connnection: close");
        client.println();
        client.println("<!DOCTYPE HTML>");
        client.println("<html>");
        // add a meta refresh tag, so the browser pulls again every second:
        client.println("<meta http-equiv=\"refresh\" content=\"1\">");
        client.println("<h1>Arduino Sensor Hub WebServer</h1>");
        client.println("<br />");
        client.println("<h2>COZIR Raw Data:</h2>");
        client.print("<p1>");
        client.print(outputString);
        client.print("</p1>");
        client.println("<h2>PIR Sensor Status:</h2>");
        client.print("<p2>");
        if (pirState == HIGH) {
          client.print("HIGH");
        }
        else
          client.print("LOW");
        client.print("</p2>");
        client.println("<h2>LDR Raw Analog Value:</h2>");
        client.print("<p3>");
        int raw = analogRead(ldrPin);   
        client.print(raw);
        client.println("</p3>");
        client.println("<br />");
        client.println("</html>");
        break;
      }
      if (c == '\n') {
        // you're starting a new line
        currentLineIsBlank = true;
      } 
      else if (c != '\r') {
        // you've gotten a character on the current line
        currentLineIsBlank = false;
      }
    }
  }
  // give the web browser time to receive the data
  delay(1);
  // close the connection:
  client.stop();
}
